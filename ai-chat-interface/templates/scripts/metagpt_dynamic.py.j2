#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
MetaGPT 동적 실행 스크립트
프로젝트: {{ project.project_name }}
프로젝트 ID: {{ project.project_id }}
최종 요구사항: {{ project.final_requirement }}

이 스크립트는 DB에서 자동 생성되었습니다.
"""

import asyncio
import os
from metagpt.roles import (
    ProductManager,
    Architect,
    ProjectManager,
    Engineer,
    QaEngineer
)
from metagpt.team import Team
from metagpt.llm import LLM
from metagpt.config2 import Config

# LLM 설정 함수
def setup_llm(model_name: str) -> LLM:
    """모델명에 따라 LLM 설정"""
    config = Config.default()

    if model_name.startswith('gpt'):
        config.llm.api_type = "openai"
        config.llm.model = model_name
        config.llm.api_key = os.getenv('OPENAI_API_KEY')
    elif model_name.startswith('gemini'):
        config.llm.api_type = "gemini"
        config.llm.model = model_name
        config.llm.api_key = os.getenv('GOOGLE_API_KEY')
    elif model_name.startswith('claude'):
        config.llm.api_type = "anthropic"
        config.llm.model = model_name
        config.llm.api_key = os.getenv('ANTHROPIC_API_KEY')
    else:
        # 기본값
        config.llm.api_type = "gemini"
        config.llm.model = "gemini-2.0-flash-exp"
        config.llm.api_key = os.getenv('GOOGLE_API_KEY')

    return LLM(config=config)

# ============================================
# Roles 정의 (DB에서 자동 생성)
# ============================================

{% for agent in agents %}
# Agent {{ agent.agent_order }}: {{ agent.role }}
{% if agent.role == 'ProductManager' %}
{{ agent.role|lower|replace(' ', '_') }} = ProductManager(
    name="{{ agent.role }}",
    profile="{{ agent.goal }}",
    goal="{{ agent.goal }}",
    constraints="{{ agent.backstory }}"
)
{% elif agent.role == 'Architect' %}
{{ agent.role|lower|replace(' ', '_') }} = Architect(
    name="{{ agent.role }}",
    profile="{{ agent.goal }}",
    goal="{{ agent.goal }}",
    constraints="{{ agent.backstory }}"
)
{% elif agent.role == 'ProjectManager' %}
{{ agent.role|lower|replace(' ', '_') }} = ProjectManager(
    name="{{ agent.role }}",
    profile="{{ agent.goal }}",
    goal="{{ agent.goal }}",
    constraints="{{ agent.backstory }}"
)
{% elif agent.role == 'Engineer' %}
{{ agent.role|lower|replace(' ', '_') }} = Engineer(
    name="{{ agent.role }}",
    profile="{{ agent.goal }}",
    goal="{{ agent.goal }}",
    constraints="{{ agent.backstory }}"
)
{% elif agent.role == 'QaEngineer' %}
{{ agent.role|lower|replace(' ', '_') }} = QaEngineer(
    name="{{ agent.role }}",
    profile="{{ agent.goal }}",
    goal="{{ agent.goal }}",
    constraints="{{ agent.backstory }}"
)
{% endif %}

{% endfor %}

# ============================================
# Team 구성 및 실행
# ============================================

async def main():
    """MetaGPT 실행 메인 함수"""

    print("=" * 50)
    print(f"프로젝트: {{ project.project_name }}")
    print(f"프로젝트 ID: {{ project.project_id }}")
    print(f"요구사항: {{ project.final_requirement }}")
    print("=" * 50)

    # Team 구성
    team = Team()
    {% for agent in agents %}
    team.hire([{{ agent.role|lower|replace(' ', '_') }}])
    {% endfor %}

    # 프로젝트 실행
    team.invest(investment=3.0)
    team.run_project("{{ project.final_requirement }}")

    # 결과 대기
    await team.run(n_round=5)

    print("\n" + "=" * 50)
    print("실행 완료")
    print("=" * 50)


if __name__ == '__main__':
    try:
        asyncio.run(main())
    except Exception as e:
        print(f"오류 발생: {e}")
        import traceback
        traceback.print_exc()
